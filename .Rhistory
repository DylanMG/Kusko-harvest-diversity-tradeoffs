ylim = c(0,350))
axis(2,las=2)
box(col="grey")
points(spawn/1000,
rec.pred/1000,
type="l",
col="red",
lwd=2)
legend(100,370,
c("Ricker","Time-varying Beverton-Holt"),
lwd=2,
col=c("black","red"),
cex=0.8,
bty="n")
# panel B
plot( x = seq(10:50),
y = BH_prod,
type = "l",
lwd = 2,
ylab = "productivity",
xlab = "time",
yaxt = "n",
col="grey",
ylim=c(1,17))
axis(2,las=2)
box(col="grey")
points(seq(10:50),
BH_prod,
col=time_prod_col,
pch=16)
ricker_a <- log(7.17)
ricker_b <- -0.0000098718
ricker_para <- array(NA,dim=c(2,100))
ricker_pred <- matrix(NA,100,100)
for(i in 1:100){
bh_sim_1 <- sr_sim(ny = 50,
phi = 0,
rec_sd = 0.2,
mat = c(0.15, 0.4, 0.4, 0.05),
alpha = exp(ricker_a),
beta = (ricker_b * -1),
U = 0.6,
OU = 0.1,
Spw = ricker_a/(ricker_b*-1),
Rec = rep(ricker_a/(ricker_b*-1),8),
SR_rel = "Beverton-Holt",
period = 14,
alpha.scalar = 1.35,
BH.alpha.CV = 0.6)
spawners <- bh_sim_1 $S[10:50]
recruits <- bh_sim_1 $R[10:50]
ricker_fit <- lm(log(recruits/spawners)~spawners)
ricker_para[1,i] <- ricker_fit$coefficients[1]
ricker_para[2,i] <- ricker_fit$coefficients[2]
spawn <- seq(1,300000,length.out=100)
for (j in 1:100){ricker_pred[i,j] <- exp(ricker_para[1,i] )*spawn[j]*exp(ricker_para[2,i]*spawn[j]) }
}
rec.pred <- apply(ricker_pred,c(2),quantile,probs=c(0.5),na.rm=T)
BH_prod <- bh_sim_1$BH_prod[10:50]
BH_prod_col <- viridis(7)
time_prod_col <- c(BH_prod_col[1],
BH_prod_col,
rev(BH_prod_col),
BH_prod_col,
rev(BH_prod_col),
BH_prod_col,
rev(BH_prod_col))[1:41]
rbind(BH_prod,time_prod_col)
###
ricker_pred_k <- matrix(NA,100,1)
spawn <- seq(1,300000,length.out=100)
for (i in 1:100){ricker_pred_k[i] <- exp(ricker_a )*spawn[i]*exp(ricker_b*spawn[i]) }
par(mfrow=c(1,2),bty="o", mar=c(4,4,1,1))#set dimensions to plots
# panel A
plot( x = spawn/1000,
y = ricker_pred_k/1000,
type = "l",
lwd = 2,
ylab = "recruits (000s)",
xlab = "spawners (000s)",
yaxt = "n",
ylim = c(0,350))
axis(2,las=2)
box(col="grey")
points(spawn/1000,
rec.pred/1000,
type="l",
col="red",
lwd=2)
legend(100,370,
c("Ricker","Time-varying Beverton-Holt"),
lwd=2,
col=c("black","red"),
cex=0.8,
bty="n")
# panel B
plot( x = seq(10:50),
y = BH_prod,
type = "l",
lwd = 2,
ylab = "productivity",
xlab = "time",
yaxt = "n",
col="grey",
ylim=c(1,17))
axis(2,las=2)
box(col="grey")
points(seq(10:50),
BH_prod,
col=time_prod_col,
pch=16)
ricker_a <- log(7.17)
ricker_b <- -0.0000098718
ricker_para <- array(NA,dim=c(2,100))
ricker_pred <- matrix(NA,100,100)
for(i in 1:100){
bh_sim_1 <- sr_sim(ny = 50,
phi = 0,
rec_sd = 0.2,
mat = c(0.15, 0.4, 0.4, 0.05),
alpha = exp(ricker_a),
beta = (ricker_b * -1),
U = 0.6,
OU = 0.1,
Spw = ricker_a/(ricker_b*-1),
Rec = rep(ricker_a/(ricker_b*-1),8),
SR_rel = "Beverton-Holt",
period = 10,
alpha.scalar = 1.35,
BH.alpha.CV = 0.6)
spawners <- bh_sim_1 $S[10:50]
recruits <- bh_sim_1 $R[10:50]
ricker_fit <- lm(log(recruits/spawners)~spawners)
ricker_para[1,i] <- ricker_fit$coefficients[1]
ricker_para[2,i] <- ricker_fit$coefficients[2]
spawn <- seq(1,300000,length.out=100)
for (j in 1:100){ricker_pred[i,j] <- exp(ricker_para[1,i] )*spawn[j]*exp(ricker_para[2,i]*spawn[j]) }
}
rec.pred <- apply(ricker_pred,c(2),quantile,probs=c(0.5),na.rm=T)
BH_prod <- bh_sim_1$BH_prod[10:50]
BH_prod_col <- viridis(7)
time_prod_col <- c(BH_prod_col[1],
BH_prod_col,
rev(BH_prod_col),
BH_prod_col,
rev(BH_prod_col),
BH_prod_col,
rev(BH_prod_col))[1:41]
rbind(BH_prod,time_prod_col)
###
ricker_pred_k <- matrix(NA,100,1)
spawn <- seq(1,300000,length.out=100)
for (i in 1:100){ricker_pred_k[i] <- exp(ricker_a )*spawn[i]*exp(ricker_b*spawn[i]) }
par(mfrow=c(1,2),bty="o", mar=c(4,4,1,1))#set dimensions to plots
# panel A
plot( x = spawn/1000,
y = ricker_pred_k/1000,
type = "l",
lwd = 2,
ylab = "recruits (000s)",
xlab = "spawners (000s)",
yaxt = "n",
ylim = c(0,350))
axis(2,las=2)
box(col="grey")
points(spawn/1000,
rec.pred/1000,
type="l",
col="red",
lwd=2)
legend(100,370,
c("Ricker","Time-varying Beverton-Holt"),
lwd=2,
col=c("black","red"),
cex=0.8,
bty="n")
# panel B
plot( x = seq(10:50),
y = BH_prod,
type = "l",
lwd = 2,
ylab = "productivity",
xlab = "time",
yaxt = "n",
col="grey",
ylim=c(1,17))
axis(2,las=2)
box(col="grey")
points(seq(10:50),
BH_prod,
col=time_prod_col,
pch=16)
ricker_a <- log(7.17)
ricker_b <- -0.0000098718
ricker_para <- array(NA,dim=c(2,100))
ricker_pred <- matrix(NA,100,100)
for(i in 1:100){
bh_sim_1 <- sr_sim(ny = 50,
phi = 0,
rec_sd = 0.2,
mat = c(0.15, 0.4, 0.4, 0.05),
alpha = exp(ricker_a),
beta = (ricker_b * -1),
U = 0.6,
OU = 0.1,
Spw = ricker_a/(ricker_b*-1),
Rec = rep(ricker_a/(ricker_b*-1),8),
SR_rel = "Beverton-Holt",
period = 12,
alpha.scalar = 1.35,
BH.alpha.CV = 0.6)
spawners <- bh_sim_1 $S[10:50]
recruits <- bh_sim_1 $R[10:50]
ricker_fit <- lm(log(recruits/spawners)~spawners)
ricker_para[1,i] <- ricker_fit$coefficients[1]
ricker_para[2,i] <- ricker_fit$coefficients[2]
spawn <- seq(1,300000,length.out=100)
for (j in 1:100){ricker_pred[i,j] <- exp(ricker_para[1,i] )*spawn[j]*exp(ricker_para[2,i]*spawn[j]) }
}
rec.pred <- apply(ricker_pred,c(2),quantile,probs=c(0.5),na.rm=T)
BH_prod <- bh_sim_1$BH_prod[10:50]
BH_prod_col <- viridis(7)
time_prod_col <- c(BH_prod_col[1],
BH_prod_col,
rev(BH_prod_col),
BH_prod_col,
rev(BH_prod_col),
BH_prod_col,
rev(BH_prod_col))[1:41]
rbind(BH_prod,time_prod_col)
###
ricker_pred_k <- matrix(NA,100,1)
spawn <- seq(1,300000,length.out=100)
for (i in 1:100){ricker_pred_k[i] <- exp(ricker_a )*spawn[i]*exp(ricker_b*spawn[i]) }
par(mfrow=c(1,2),bty="o", mar=c(4,4,1,1))#set dimensions to plots
# panel A
plot( x = spawn/1000,
y = ricker_pred_k/1000,
type = "l",
lwd = 2,
ylab = "recruits (000s)",
xlab = "spawners (000s)",
yaxt = "n",
ylim = c(0,350))
axis(2,las=2)
box(col="grey")
points(spawn/1000,
rec.pred/1000,
type="l",
col="red",
lwd=2)
legend(100,370,
c("Ricker","Time-varying Beverton-Holt"),
lwd=2,
col=c("black","red"),
cex=0.8,
bty="n")
# panel B
plot( x = seq(10:50),
y = BH_prod,
type = "l",
lwd = 2,
ylab = "productivity",
xlab = "time",
yaxt = "n",
col="grey",
ylim=c(1,17))
axis(2,las=2)
box(col="grey")
points(seq(10:50),
BH_prod,
col=time_prod_col,
pch=16)
ricker_a <- log(7.17)
ricker_b <- -0.0000098718
ricker_para <- array(NA,dim=c(2,100))
ricker_pred <- matrix(NA,100,100)
for(i in 1:100){
bh_sim_1 <- sr_sim(ny = 50,
phi = 0,
rec_sd = 0.2,
mat = c(0.15, 0.4, 0.4, 0.05),
alpha = exp(ricker_a),
beta = (ricker_b * -1),
U = 0.6,
OU = 0.1,
Spw = ricker_a/(ricker_b*-1),
Rec = rep(ricker_a/(ricker_b*-1),8),
SR_rel = "Beverton-Holt",
period = 12,
alpha.scalar = 1.4,
BH.alpha.CV = 0.6)
spawners <- bh_sim_1 $S[10:50]
recruits <- bh_sim_1 $R[10:50]
ricker_fit <- lm(log(recruits/spawners)~spawners)
ricker_para[1,i] <- ricker_fit$coefficients[1]
ricker_para[2,i] <- ricker_fit$coefficients[2]
spawn <- seq(1,300000,length.out=100)
for (j in 1:100){ricker_pred[i,j] <- exp(ricker_para[1,i] )*spawn[j]*exp(ricker_para[2,i]*spawn[j]) }
}
rec.pred <- apply(ricker_pred,c(2),quantile,probs=c(0.5),na.rm=T)
BH_prod <- bh_sim_1$BH_prod[10:50]
BH_prod_col <- viridis(7)
time_prod_col <- c(BH_prod_col[1],
BH_prod_col,
rev(BH_prod_col),
BH_prod_col,
rev(BH_prod_col),
BH_prod_col,
rev(BH_prod_col))[1:41]
rbind(BH_prod,time_prod_col)
###
ricker_pred_k <- matrix(NA,100,1)
spawn <- seq(1,300000,length.out=100)
for (i in 1:100){ricker_pred_k[i] <- exp(ricker_a )*spawn[i]*exp(ricker_b*spawn[i]) }
par(mfrow=c(1,2),bty="o", mar=c(4,4,1,1))#set dimensions to plots
# panel A
plot( x = spawn/1000,
y = ricker_pred_k/1000,
type = "l",
lwd = 2,
ylab = "recruits (000s)",
xlab = "spawners (000s)",
yaxt = "n",
ylim = c(0,350))
axis(2,las=2)
box(col="grey")
points(spawn/1000,
rec.pred/1000,
type="l",
col="red",
lwd=2)
legend(100,370,
c("Ricker","Time-varying Beverton-Holt"),
lwd=2,
col=c("black","red"),
cex=0.8,
bty="n")
# panel B
plot( x = seq(10:50),
y = BH_prod,
type = "l",
lwd = 2,
ylab = "productivity",
xlab = "time",
yaxt = "n",
col="grey",
ylim=c(1,17))
axis(2,las=2)
box(col="grey")
points(seq(10:50),
BH_prod,
col=time_prod_col,
pch=16)
ricker_a <- log(7.17)
ricker_b <- -0.0000098718
ricker_para <- array(NA,dim=c(2,100))
ricker_pred <- matrix(NA,100,100)
for(i in 1:100){
bh_sim_1 <- sr_sim(ny = 50,
phi = 0,
rec_sd = 0.2,
mat = c(0.15, 0.4, 0.4, 0.05),
alpha = exp(ricker_a),
beta = (ricker_b * -1),
U = 0.6,
OU = 0.1,
Spw = ricker_a/(ricker_b*-1),
Rec = rep(ricker_a/(ricker_b*-1),8),
SR_rel = "Beverton-Holt",
period = 12,
alpha.scalar = 1.375,
BH.alpha.CV = 0.6)
spawners <- bh_sim_1 $S[10:50]
recruits <- bh_sim_1 $R[10:50]
ricker_fit <- lm(log(recruits/spawners)~spawners)
ricker_para[1,i] <- ricker_fit$coefficients[1]
ricker_para[2,i] <- ricker_fit$coefficients[2]
spawn <- seq(1,300000,length.out=100)
for (j in 1:100){ricker_pred[i,j] <- exp(ricker_para[1,i] )*spawn[j]*exp(ricker_para[2,i]*spawn[j]) }
}
rec.pred <- apply(ricker_pred,c(2),quantile,probs=c(0.5),na.rm=T)
BH_prod <- bh_sim_1$BH_prod[10:50]
BH_prod_col <- viridis(7)
time_prod_col <- c(BH_prod_col[1],
BH_prod_col,
rev(BH_prod_col),
BH_prod_col,
rev(BH_prod_col),
BH_prod_col,
rev(BH_prod_col))[1:41]
rbind(BH_prod,time_prod_col)
###
ricker_pred_k <- matrix(NA,100,1)
spawn <- seq(1,300000,length.out=100)
for (i in 1:100){ricker_pred_k[i] <- exp(ricker_a )*spawn[i]*exp(ricker_b*spawn[i]) }
par(mfrow=c(1,2),bty="o", mar=c(4,4,1,1))#set dimensions to plots
# panel A
plot( x = spawn/1000,
y = ricker_pred_k/1000,
type = "l",
lwd = 2,
ylab = "recruits (000s)",
xlab = "spawners (000s)",
yaxt = "n",
ylim = c(0,350))
axis(2,las=2)
box(col="grey")
points(spawn/1000,
rec.pred/1000,
type="l",
col="red",
lwd=2)
legend(100,370,
c("Ricker","Time-varying Beverton-Holt"),
lwd=2,
col=c("black","red"),
cex=0.8,
bty="n")
# panel B
plot( x = seq(10:50),
y = BH_prod,
type = "l",
lwd = 2,
ylab = "productivity",
xlab = "time",
yaxt = "n",
col="grey",
ylim=c(1,17))
axis(2,las=2)
box(col="grey")
points(seq(10:50),
BH_prod,
col=time_prod_col,
pch=16)
##------------------------------------------------------------------------------#
# Load functions and libraries for analysis
#------------------------------------------------------------------------------#
source("functions.R")
library(MASS)
library(mvtnorm)
library(plotrix)
library(matrixStats)
library(mgcv)
library(plyr)
library(fields)
library(gdata)
library(graphics)
library(fields)
library(dichromat)
library(grDevices)
library(viridis)
library(shape)
library(autoimage)
library(tidyverse)
library(plyr)
#------------------------------------------------------------------------------#
# Load posterior samples
#------------------------------------------------------------------------------#
#samps = read.csv("inputs/Posterior_Samples_alt_vuln_S_trunc.csv")
#samps = read.csv("inputs/Posterior_Samples_alt_ess_S_trunc.csv")
samps = read.csv("inputs/Posterior_Samples_base_S_trunc.csv")
samps = as.matrix(samps)
# --- Set common conditions for simulations  --------------------------------------------
num.sims = 1 # number of Monte Carlo trials
ny = 50 # number of years in forward simulation
pm.yr <- ny-20
for.error <- 0.27
OU <- 0.1
# --- Create array to store outcomes ----------------------------------------------------
harvest_goal <- seq(1000,100000,length.out=40)
egfloor <- seq(1,100000,length.out=40)
sim.outcomes <- array(NA,dim=c(length(egfloor),9, length(harvest_goal),num.sims))
sim.outcomes.spw.time <- array(NA,dim=c(ny,13,length(egfloor),length(harvest_goal),num.sims))
# --- Stationary Ricker SR dynamics ----------------------------------------------------
# set structural form of SR relationship
SR_rel <-  "Ricker"
dir.SR <- "F"
SR_devs <- array(1,dim=c(ny,2,13))
# run simulations
ptm <- proc.time()
for (w in 1:length(harvest_goal)){
for (k in 1:length(egfloor)){
for (l in 1: num.sims){
draw <- sample(10000,1)
alpha <- process.iteration(samps[draw,])$alpha
if(SR_rel == "Beverton-Holt"){alpha <- alpha* 1.375}
beta <- process.iteration(samps[draw,])$beta
Ro <- log(alpha)/beta
vcov.matrix <- process.iteration(samps[draw,])$Sigma_R
mat <- process.iteration(samps[draw,])$pis
Rec <- process.iteration(samps[draw,])$R
Spw <- process.iteration(samps[draw,])$S
lst.resid <- process.iteration(samps[draw,])$last_resid
phi <- process.iteration(samps[draw,])$phi
sub <- ifelse(harvest_goal[w]<45000,harvest_goal[w],45000)
com <- ifelse(harvest_goal[w]<45000,0,harvest_goal[w]-45000)
expan <- 1/(rnorm(1,0.56,0.05))
out <- process(ny,Ro,vcov.matrix,phi,mat,alpha,beta,sub,com,egfloor[k],pm.yr,
for.error,OU,Rec,Spw,lst.resid,SR_rel,BH.alpha.CV,period,dir.SR,SR_devs,expan)
sim.outcomes[k,,w,l] <- out$PMs
sim.outcomes.spw.time[,,k,w,l] <- out$S
}
}
}
(proc.time() - ptm)/60
expan
out <- process(ny,Ro,vcov.matrix,phi,mat,alpha,beta,sub,com,egfloor[k],pm.yr,
for.error,OU,Rec,Spw,lst.resid,SR_rel,BH.alpha.CV,period,dir.SR,SR_devs,expan)
out <- process(ny,vcov.matrix,phi,mat,alpha,beta,sub,com,egfloor[k],pm.yr,
for.error,OU,Rec,Spw,lst.resid,SR_rel,BH.alpha.CV,period,dir.SR,SR_devs,expan)
out
